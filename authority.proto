syntax = "proto3"

package authoritypb;

enum Type {
	STATE = 0;
	CITY = 1;
	COUNTY = 2;
	SCHOOL_DISTRICT = 3;
	OTHER = 4;
}


message Authority {
	string id = 1;
	string title = 2;
	Address address = 3;
	string phone = 4;
	Type type = 5;

	// contibution limits are measured in cents
	// ex. 10000 = $100.00
	int64 non_judicial_contibution_limit = 6;
	int64 judicial_contibution_limit = 7;

	// admin_id is the user id of the individual(s)
	// in charge of managing the filing authority
	repeated admin_id = 8;
}

message Address {
	string street = 1;
	string suite = 2;
	string city = 3;
	string state = 4;
	string zip = 5;
}

// GetAllReq is a request to fetch all Filing Authorities
message GetAllReq {}

// GetAllResp returns a list of Filing Authorities
message GetAllResp {
	repeated Authority authority = 1;
}

message AddReq {
	Authority authority = 1;
}

message AddResp {
	string authority_id = 1;
}

message DeleteReq {
	string authority_id = 1;
}

message DeleteResp {}

message GetReq {
	string authority_id = 1;
}

message GetResp {
	Authority authority = 1;
}

message AddAdminReq {
	string authority_id = 1;
	string user_id = 2;
}

message AddAdminResp {}

message DeleteAdminReq {
	string authority_id = 1;
	string user_id = 2;
}

message DeleteAdminResp {}

message UpdateTitleReq {
	string authority_id = 1;
	string title = 2;
}

message UpdateTitleResp {}

message UpdateAddressReq {
	string authority_id = 1;
	Address address = 2;
}

message UpdateAddressResp {}

message UpdatePhoneReq {
	string authority_id = 1;
	string phone = 2;
}

message UpdatePhoneResp {}

message UpdateTypeReq {
	string authority_id = 1;
	Type type = 2;
}

message UpdateTypeResp {}

message UpdateNonJudicialLimitReq {
	string authority_id = 1;
	int64 non_judicial_contibution_limit = 2;
}

message UpdateNonJudicialLimitResp {}	

message UpdateJudicialLimitReq {
	string authority_id = 1;
	int64 judicial_contibution_limit = 2;
}

message UpdateJudicialLimitResp {}

message DoesExistReq {
	string authority_id = 1;
}
	
message DoesExistResp {
	bool exists = 1;
}

service Authority {
	// GetAllAuthorities returns a list of all Filing Authorities.
	rpc GetAll(GetAllReq) returns (GetAllResp) {};

	// AddAuthority creates a new Filing Authority
	rpc Add(AddReq) returns (AddResp) {};

	// DeleteAuthority deletes a filing authority from the database
	rpc Delete(DeleteReq) returns (DeleteResp) {};

	// GetAuthority returns information about a specific Filing Authority
	rpc Get(GetReq) returns (GetResp) {};

	// AddAuthorityAdmin adds a user as an admin to a Filing Authority
	rpc AddAdmin(AddAdminReq) returns (AddAdminResp) {};

	// DeleteAuthorityAdmin removes an admin user from a Filing Authority 
	rpc DeleteAdmin(DeleteAdminReq) returns (DeleteAdminResp) {};

	// UpdateAuthorityTitle updates the display name of a Filing Authority
	rpc UpdateTitle(UpdateTitleReq) returns (UpdateTitleResp) {};

	// UpdateAuthorityAddress changes the address of a Filing Authority
	rpc UpdateAddress(UpdateAddressReq) returns (UpdateAddressResp) {};

	// UpdateAuthorityPhone changes the contact phone number of a Filing Authority
	rpc UpdatePhone(UpdatePhoneReq) returns (UpdatePhoneResp) {};

	// UpdateAuthorityType changes the authority type of a Filing Authority. This call shouldn't
	// be used very often but useful if a mistake was made when creating the initial Filing Authority
	rpc UpdateType(UpdateTypeReq) returns (UpdateTypeResp) {};

	// UpdateNonJudicialLimit sets the non-judicial campaign contribution limit for a Filing Authority
	rpc UpdateNonJudicialLimit(UpdateNonJudicialLimitReq) returns (UpdateNonJudicialLimitResp) {};

	// UpdateJudicialLimit set the judicial campaign contribution limit for a Filing Authority
	rpc UpdateJudicialLimit(UpdateJudicialLimitReq) returns (UpdateJudicialLimitResp) {};

	// DoesExist returns a bool to validate that a filing authority exists
	rpc DoesExist(DoesExistReq) returns (DoesExistResp) {};
}

